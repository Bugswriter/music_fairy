non_zero(){
    if [ $1 ==  0 ]
    then
        echo "please give me some argumant"
        exit 1
    fi

}

create_playlist(){
    name=""
    file=~/.local/share/music_fairy/playlist/$1.txt
    while true 
    do
           read name
        if [ $name == "exit()" ]
        then
            break
        fi
        echo "$name" >> $file
        echo "ADDED ï€Œ"
    done
}

delete_playlist(){
           file=~/.local/share/music_fairy/playlist/$1.txt
           if [ -e $file ]
            then

               rm $file
            
               echo "DELETED"
           fi
           }

           play_playlist(){
    INVIDIOUS_INSTANCE="https://vid.puffyan.us" # some instances might not work
           file=~/.local/share/music_fairy/playlist/$1.txt
           if [ -e $file ]
           then
            while read song 
            do
            query="$(printf '%s' "song audio $song" | tr ' ' '+' )"
    video_id="$(curl -s "$INVIDIOUS_INSTANCE/search?q=$query" | grep -Eo "watch\?v=.{11}" | head -n 1)"
    youtube_url="https://youtube.com/$video_id"

    # get url for bestaudio stream from the youtube video
    audio_url="$(yt-dlp -f bestaudio --get-url "$youtube_url")"
    mpv "$audio_url"
           echo "added"
            done < $file
    mpv play
           fi

           }
play_song(){

    INVIDIOUS_INSTANCE="https://vid.puffyan.us" # some instances might not work
    # stop current song, clear playlist
    mpv stop
    mpv clear

    # take mic input
    #ffmpeg -y -f alsa -i default -acodec pcm_s16le -ac 1 -ar 44100 -t 4 -f wav ~/.cache/audio.wav

    # convert it into text & store it in `audio_input`
    #vosk-transcriber -m $VOSK_MODEL_PATH -i ~/.cache/audio.wav -o ~/.cache/audio_text.txt
    #read audio_input < ~/.cache/audio_text.txt


    #get song's name from params
    audio_input=${@}


    # Audio confirmation notification
    # google_speech " All right.. let me play.. $audio_input" &

    # make youtube search query
    query="$(printf '%s' "song audio $audio_input" | tr ' ' '+' )"

    # search on invidous (youtube) instance for video id to make a url
    video_id="$(curl -s "$INVIDIOUS_INSTANCE/search?q=$query" | grep -Eo "watch\?v=.{11}" | head -n 1)"
    youtube_url="https://youtube.com/$video_id"

    # get url for bestaudio stream from the youtube video
    audio_url="$(yt-dlp -f bestaudio --get-url "$youtube_url")"

    # Get youtube video title for system notification
    title=$(yt-dlp --get-title "$youtube_url")
    notify-send "Playing: " "$title"
    # add the track to mpd and play
    mpv add "$audio_url"
    mpv play

}
